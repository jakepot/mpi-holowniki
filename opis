Na początku procesy ustawiają sobie liczbę dostępnych holowników
Jeżeli statek chce skorzystać z holowników to wysyła prosbę o pozwolenie na przydział holownikow do wszystkich innych procesów wraz z timestampem.
Mogą wystąpic dwa scenariusze:
    1) wszystkie inne procesy odsyłaja do niego wiadomość ze zgodą
    . jeżeli nie ma wystarczającej ilości wolnych holowników to proces przechodzi w stan oczekiwania, sprawdzając liczbę
    holowników po otrzymaniu wiadomości o ich zwolnieniu przez inny statek
        . wysyła do wszystkich wiadomość o ilości zajmowanych holowników (np. -4) wraz informacją o wyjściu z kolejki
        . sekcja krytyczna (obsługa w porcie)
        . wysyła do wszystkich wiadomość o ilości zwalnianych holowników (np. +4)
        . algorytm jest wykonywany ponownie z nowym timestampem
    2) Co najmniej jedna z wiadomości zwrotnych jest negatywna
    . proces zapisuje sobie liczbę odpowiedzi negatywnych jako miejsce w kolejce
        . proces zaprzestaje swojego żądania i przechodzi w stan
 
. proces otrzymuje zapytanie o kolejkę:
    1) jeżeli proces nie ubiega się o przydział holowników, to odsyła wiadomośc pozytywną
    2) jeżeli proces też ubiega sie o przydział holowników, to porównuje timestampy i odsyła stosowna odpowiedź
        w przypadku takich samych timestampów, konflikt jest rozstrzygany na korzyść procesu z niższym rankiem
    3) jeżeli proces ma aktualnie przydzielone holowniki, to odsyła wiadomośc pozytywną
 
. proces otrzymuje informacje o zmianie ilości wolnych holowników
    - odpowiednio zmienia swoją lokalną liczbę wolnych holowników
 
. proces otrzymuje informację o wyjściu z kolejki innego procesu:
    - proces zmniejsza o 1 zmienną miejsca w kolejce
    - jeżeli proces stoi teraz na czele kolejki, to realizuje scenariusz 1)
 
wątek wchodzenia do strefy krytycznej
while(1):
    wait(random())
  inQueue = true
    generateTimestamp()
    sendToAll(requestTag, timestamp, rank)
  waitingForReplies = true
    waitForAllReplies()
  position = trueReplies
  waitingForReplies = false
  while position > 0:
    waitForQueueUpdate()
    while notEnoughTugboats:
    waitForTugboatsUpdate()
  sendToAll(takeTugboatsTag, nTugboats)
  inQueue = false
  strefa krytyczna
  sendToAll(releaseTugboatsTag, nTugboats)
 
wątek odpowiedzi
while(1):
  waitForMessage()
  if tag == requestTag:
    if inQueue:
      if myTimestamp == requestTimestamp:
        if myRank < requestRank:
          sendReply(true)
        else:
          sendReply(false)
      if myTimestamp < requestTimestamp:
        sendReply(true)
      else:
        sendReply(false)
    else:
      sendReply(false) // nie czekam
  if tag == takeTugboatsTag:
    tugboats -= nTugboats
    position -= 1
  if tag == releaseTugboatsTag:
    tugboats += nTugboats
