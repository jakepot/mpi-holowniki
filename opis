Na początku wszystkie procesy ustawiają sobie liczbę dostępnych holowników oraz synchronizują zegary.
Procesy działają w pętli symulującej wpływanie i wypływanie statków z/do portu.
Oprócz głównej pętli równolegle działa wątek obsługujący przychodzące wiadomości.

Jeżeli proces A chce skorzystać z holowników, ustawia sobie timestamp i wysyła do pozostałych procesów prośbę o zgodę na uzyskanie zasobów.
W odpowiedzi może dostać od procesu B:
  a) zgodę, jeśli:
    * proces B nie ubiega się o przydział zasobów, lub
    * proces B ubiega się o przydział zasobów, ale jego timestamp jest wyższy od procesu A, lub
    * proces B ubiega się o przydział zasobów, jego timestamp jest równy timestampowi procesu A, ale proces B ma wyższy rank niż proces A
  b) liczbę zarezerwowanych holowników, w pozostałych przypadkach (proces B ma priorytet nad procesem A)
Następnie, po otrzymaniu wszystkich odpowiedzi, jeżeli suma własnych oraz zarezerwowanych przez inne procesy holowników jest mniejsza od liczby obecnie dostępnych, proces A przechodzi w stan aktywnego czekania.
Kiedy liczba dostępnych holowników będzie wystarczająca dla procesu A oraz ewentualnych innych procesów rezerwujących holowniki, proces A wysyła do wszystkich procesów wiadomość o zajęciu danej liczby holowników, po czym wchodzi do strefy krytycznej.
Po upłynięciu czasu pobytu w sekcji krytycznej, proces A rozsyła do pozozstałych procesów wiadomość o zwolnieniu holowników i wraca na początek pętli.

Wątek obsługi wiadomości w odpowiedzi na:
  a) wiadomość z prośbą o zgodę - ustala który proces ma priorytet (jak wyżej) i odsyła stosowną odpowiedź,
  b) wiadomość o zajęciu holowników - zmienia liczbę dostępnych holowników oraz odejmuje tą liczbą od liczby zarezerwowanych, jeśli obecnie ubiega się o ich przydział,
  c) wiadomość o oddaniu holowników - zmienia liczbę dostępnych holowników,
  d) wiadomość zwrotną na prośbę - jeśli wiadomość nie jest zgodą, zwiększa liczbę zarezerwowanych holowników.

Wykorzystanie metody rezerwacji zamiast kolejki jak w poprzedniej wersji naszego algorytmu pozwoliło na usprawnienie wchodzenia do sekcji krytycznej, np.:
3 statki wymagające 3 holowników, 1 statek zwalnia 11 holowników, wówczas 3 statki zająć holowniki naraz zamiast po kolei.

wątek wchodzenia do strefy krytycznej
while(1):
  wait(random())
  generateTimestamp()
  inQueue = true
  sendToAll(requestTag, timestamp, rank)
  waitForAllReplies()
  while (availableBoats - reservedBoats < requiredBoats):
    sleep()
  sendToAll(takeTugboatsTag, nTugboats)
  inQueue = false
  <strefa krytyczna>
  sendToAll(releaseTugboatsTag, nTugboats)

wątek obsługi wiadomości
while(1):
  waitForMessage()
  if tag == requestTag:
    if inQueue:
      if myTimestamp < requestTimestamp ||
         myTimestamp == requestTimestamp && myRank < requestRank:
        sendReply(required)
      else:
        sendReply(go_ahead)
    else:
      sendReply(go_ahead)
  if tag == takeTugboatsTag:
    tugboats -= nTugboats
    if inQueue:
      reserved -= nTugboats
  if tag == releaseTugboatsTag:
    tugboats += nTugboats
  if tag == replyTag:
    if reply != go_ahead:
      reserved += nTugboats
    repliesRemaining -= 1
